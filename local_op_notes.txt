本地三个最重要的概念：工作区，暂存区，版本库

1. 创建版本库

创建仓库： git init

为什么会有 add 和 commit 两个操作？
add可以分开添加不同的文件至仓库，而commit是提交所有已经添加的文件至仓库；也就是说，由于这个功能，我们可以同时修改了两个文件，却只提交一个文件。这样就增加了灵活性。

2. 时光穿梭机

检查状态： git status

查看修改： 在 add 之前，git diff 文件名

2.2 版本回退

版本回退过程：git log --pretty=oneline 查看提交历史，找到每个版本的 commit id，之后用 git reset --hard commit id 来回退到某个版本；当然回退也不一定非要用commit id，我们可以使用HEAD来代替！HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，依次类推。

那么如果我新写的代码还没有add和commit呢，怎么回到前面的版本，这个简单，先把未能提交的commit了，再回退

那如果我要恢复回退之前的版本怎么办呢，这时候就必须用到commit id了，或者在terminal理这往回翻一下记录，或者用 git reflog 查看你的命令历史


3.3 工作区和暂存区

工作区就是创建仓库的目录，这个没什么好说的

说到暂存区，就要提到add和commit了，add其实就是把修改先放到暂存区，而commit就是把暂存区的内容全部提交到当前分支。比较特殊的一点是，一个从来没有被add过文件，它的状态是untracked；如果它曾经被add过，后来再修改它，它的状态会是modified。

3.4 管理修改

略

3.5 撤销修改

2.2版本回退里我们讲过，如果中途修改中想回退到上个版本的做法，是需要先提交现在的修改再回退。有没有哪个方法可以不提交，也可以中途撤销现在的修改呢？当然！

git checkout -- file 可以丢弃修改的内容。这里分两种情况：1. 如果file修改还没有提交到暂存区（add），那么撤销修改之后回到当前版本一模一样。2. 如果file已经提交到暂存区了，之后再修改，那么撤销修改会回到提交暂存区后的状态。

注意： checkout 后面的 "--"很重要，没了这条标记，git checkout 就是切换分支的意思了

问题又来了，上面我们做的是丢弃工作区的修改，如果我要撤销的就是暂存区里的内容呢？不怕，我们可以撤销暂存区里的文件，而且仍然是 git reset 语句。不过语法稍有改变：git reset HEAD file， 即把暂存区里的file文件修改撤销掉。

3.6 删除文件
从版本库里删除文件，用 rm 命令是删不干净的,版本里仍然有文件，rm的删除记录会被当做为被add到暂存区的修改。
正确的做法是 git rm file, 之后在commit一下









