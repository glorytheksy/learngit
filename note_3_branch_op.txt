分支的意义：独立开发某功能，不影响主干程序的其它功能开发进度

1. 创建与合并分支

版本回退的本质：指针

分支创建的本质：增加了一个指针(隶属于这个分支的HEAD指针)来指向新的分支，比如从主干master创建一个分支叫dev，从创建开始，对dev的修改只牵扯新的分支的指针移动，而原先的分支的指针不会因为dev的改变而移动

分支合并的本质：母分支的指针master指向dev分支的指针上，这时可以删除dev指针

创建分支：git checkout -b 分支名；这里-b代表创建并切换相当于一下语句：
git branch dev
git checkout dev
switched to branch 'dev'
我们可以用命令 git branch 查看当前的分支，其会列出所有分支

切换分支：git switch 分支名，或者 git switch -c 分支名

合并分支：git merge 分支名

删除分支：git branch -d 分支名

2. 解决冲突
比如新建分支feature，进行了一系列的修改，与此同时主分支master也有一系列修改。则如果此时master在合并feature的时候，不可以像上个小节那样，简单的将feature的指针指向master的分支；而是需要将master 的 修改 和 feature的修改合并起来。 如果拿汽车赛道比喻的话，这里像是多了一个分赛道，但最终会合并到主赛道当中

而这种修改，会带来冲突（一般情况下），这时候就需要我们手动修改冲突。之后在将修改放进暂存区并提交。

3.1 以no-ff的方式合并分支
我们知道，分支dev在合并至master时，如果期间master未作改变，则合并的实际操作就是master指针直接指向dev，这种方法叫做Fastforward合并模式；此时如果我们删除了dev，就失去了这个分支的信息（不知道何时创建何时合并，删除是必要的，这样可以阻止别人回头再分支上再做开发，使得分支混乱，但分支的信息我们应该保留）；
这样看的话，其实按照 2 中描述的合并方法比较好，该方法叫 --no-ff 合并模式，我们可以用git强制实施--no-ff模式合并，命令：it merge --no-ff -m "merge with no-ff" 分支名。之后再删除dev，就会保留其信息

3.2 分支策略
略

4 bug 分支
如果在分支dev开发中途boss告诉你需要修改master上的bug，但你这时dev分支开发到一半，你又不想commit怎么办呢？我们可以把当前的修改存起来（不是存在暂存区，更不是commit到仓库，而是一个独立的区域），用 git stash 命令就可以， 这时输入 git status 你会发现工作区已经没有修改的痕迹了。 bug修改完之后，你回到dev分支，输入 git stash list 就可查看你之前存储的未提交的代码，如果要恢复他们，有两个指令可以选：(1)git stash apply，这个命令不会删除stash，你需要手动 git stash drop 来删除stash (2) git stash pop，该命令在恢复stash内容至工作区的同时会删除stash。

5. 删除未merge的分支
之前我们删除已经merge过的分支时，用的是 git branch -d 分支名，但有时候我们需要删除未merge过的分支，这时候 -d 就要改为 -D，意为强制删除。 否则会报错

6. 多人协作
哪些分支需要放在远程上： MASTER, DEV, 以及需要共同协作完成的feature分支。

从远程拉取分支代码至本地：git checkout -b branch-name origin/branch-name

建立本地分支与远程分支的关联：git branch --set-upstream branch-name origin/branch-name




